// script.js

// Attendre que le DOM soit compl√®tement charg√©
document.addEventListener('DOMContentLoaded', function() {
    // Variables pour la modal du formulaire de recrutement
    const modal = document.getElementById('recruitmentModal');
    const openBtn = document.getElementById('openFormBtn');
    const closeBtn = document.querySelector('.close-modal');
    const form = document.getElementById('recruitmentForm');
    const knowledgeSlider = document.getElementById('knowledge');
    const knowledgeValue = document.getElementById('knowledgeValue');
    const formStatus = document.getElementById('formStatus');
    
    // URL de votre webhook Discord (√† remplacer par votre URL r√©elle)
    const webhookUrl = "https://discord.com/api/webhooks/1369278950077104229/bDqJnKwJ8GqyGzB1T9RHLF9edTn9oMwJ-fdZZZrsQedlzvYvUZrvC_pp07Cci_b6_XQS";
    
    // Ouvrir la modal quand on clique sur le bouton
    if (openBtn) {
        openBtn.addEventListener('click', function() {
            modal.style.display = "block";
            document.body.style.overflow = "hidden"; // Emp√™cher le d√©filement de la page
        });
    }
    
    // Fermer la modal
    if (closeBtn) {
        closeBtn.addEventListener('click', function() {
            modal.style.display = "none";
            document.body.style.overflow = "auto"; // R√©activer le d√©filement
        });
    }
    
    // Fermer la modal si on clique en dehors
    window.addEventListener('click', function(event) {
        if (event.target === modal) {
            modal.style.display = "none";
            document.body.style.overflow = "auto";
        }
    });
    
    // Mettre √† jour la valeur affich√©e du slider
    if (knowledgeSlider) {
        knowledgeSlider.addEventListener('input', function() {
            knowledgeValue.textContent = this.value;
        });
    }
    
    // G√©rer la soumission du formulaire
    if (form) {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // V√©rifier l'√¢ge (21 ans minimum)
            const birthdate = new Date(document.getElementById('birthdate').value);
            const today = new Date();
            let age = today.getFullYear() - birthdate.getFullYear();
            const monthDiff = today.getMonth() - birthdate.getMonth();
            
            if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthdate.getDate())) {
                age--;
            }
            
            if (age < 21) {
                formStatus.textContent = "Vous devez avoir au moins 21 ans pour postuler.";
                formStatus.className = "form-status error";
                return;
            }
            
            // Collecter toutes les donn√©es du formulaire
            const formData = {
                // Contact
                phone: document.getElementById('phone').value,
                discord: document.getElementById('discord').value,
                
                // Infos personnelles
                firstName: document.getElementById('firstName').value,
                lastName: document.getElementById('lastName').value,
                birthdate: document.getElementById('birthdate').value,
                nationality: document.getElementById('nationality').value,
                height: document.getElementById('height').value,
                weight: document.getElementById('weight').value,
                diseases: document.getElementById('diseases').value || "Aucune",
                
                // Questionnaire
                motivation: document.getElementById('motivation').value,
                whyYou: document.getElementById('whyYou').value,
                knowledge: document.getElementById('knowledge').value
            };
            
            // Pr√©parer les donn√©es pour Discord
            const discordPayload = {
                embeds: [{
                    title: "Nouvelle Candidature LSPD",
                    color: 3447003, // Bleu
                    fields: [
                        {
                            name: "üìû Contact",
                            value: `**T√©l√©phone:** ${formData.phone}\n**Discord:** ${formData.discord}`,
                            inline: false
                        },
                        {
                            name: "üë§ Informations Personnelles",
                            value: `**Nom:** ${formData.lastName} ${formData.firstName}\n**Date de naissance:** ${formData.birthdate}\n**Nationalit√©:** ${formData.nationality}\n**Taille:** ${formData.height} cm\n**Poids:** ${formData.weight} kg\n**Maladies:** ${formData.diseases}`,
                            inline: false
                        },
                        {
                            name: "üí¨ Motivations",
                            value: formData.motivation,
                            inline: false
                        },
                        {
                            name: "üîç Pourquoi vous?",
                            value: formData.whyYou,
                            inline: false
                        },
                        {
                            name: "üìä Connaissance du m√©tier",
                            value: `${formData.knowledge}/10`,
                            inline: false
                        }
                    ],
                    timestamp: new Date(),
                    footer: {
                        text: "Candidature via le site LSPD"
                    }
                }]
            };
            
            // Envoyer les donn√©es au webhook Discord
            fetch(webhookUrl, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(discordPayload)
            })
            .then(response => {
                if (response.ok) {
                    // Succ√®s
                    formStatus.textContent = "Votre candidature a √©t√© envoy√©e avec succ√®s! Nous vous contacterons prochainement.";
                    formStatus.className = "form-status success";
                    form.reset();
                    
                    // Fermer la modal apr√®s 3 secondes
                    setTimeout(() => {
                        modal.style.display = "none";
                        document.body.style.overflow = "auto";
                        formStatus.style.display = "none";
                    }, 3000);
                } else {
                    // Erreur
                    throw new Error("Erreur lors de l'envoi");
                }
            })
            .catch(error => {
                formStatus.textContent = "Une erreur est survenue. Veuillez r√©essayer plus tard.";
                formStatus.className = "form-status error";
                console.error("Erreur:", error);
            });
        });
    }
});

// Hi√©rarchie des grades
const hierarchyRanks = [
    "Rookie",
    "Officier I",
    "Officier II",
    "Officier III",
    "Senior Lead Officer",
    "Sergent I",
    "Sergent II",
    "Lieutenant I",
    "Lieutenant II",
    "Captain I",
    "Captain II",
    "Captain III",
    "Commander",
    "Assistant Chief",
    "Deputy Chief",
    "Chief Of Police"
];

// Corps et leur niveau d'acc√®s
const corpsDivisions = {
    "Corps ex√©cutif": {
        ranks: ["Rookie", "Officier I", "Officier II", "Officier III", "Senior Lead Officer"],
        accessLevel: 1
    },
    "Corps de supervision": {
        ranks: ["Sergent I", "Sergent II"],
        accessLevel: 2
    },
    "Corps de commandement": {
        ranks: ["Lieutenant I", "Lieutenant II", "Captain I", "Captain II", "Captain III"],
        accessLevel: 3
    },
    "Corps de direction": {
        ranks: ["Commander", "Assistant Chief", "Deputy Chief", "Chief Of Police"],
        accessLevel: 4
    }
};

// Fonction pour d√©terminer le corps d'un grade
function getCorpsByRank(rank) {
    for (const [corps, data] of Object.entries(corpsDivisions)) {
        if (data.ranks.includes(rank)) {
            return corps;
        }
    }
    return null;
}

// Fonction pour d√©terminer le niveau d'acc√®s d'un grade
function getAccessLevelByRank(rank) {
    const corps = getCorpsByRank(rank);
    return corps ? corpsDivisions[corps].accessLevel : 0;
}

// Fonction pour v√©rifier si un niveau d'acc√®s est suffisant pour acc√©der √† une fonctionnalit√©
function hasAccess(userAccessLevel, requiredAccessLevel) {
    return userAccessLevel >= requiredAccessLevel;
}

// Fonction pour initialiser les utilisateurs depuis localStorage ou utiliser les valeurs par d√©faut
function initializeUsers() {
    const savedUsers = localStorage.getItem('lspdUsers');
    if (savedUsers) {
        // Si des utilisateurs sont d√©j√† sauvegard√©s, les utiliser
        return JSON.parse(savedUsers);
    } else {
        // Sinon, utiliser les valeurs par d√©faut et les sauvegarder
        const defaultUsers = [
            {
                prenom: "Nico",
                nom: "Capone",
                grade: "Chief Of Police",
                matricule: "COP-41",
                badge: "566843",
                division: "Direction",
                code: "1234"
            }
        ];
        localStorage.setItem('lspdUsers', JSON.stringify(defaultUsers));
        return defaultUsers;
    }
}

// Initialiser la liste des utilisateurs
const users = initializeUsers();

// Fonction pour sauvegarder les changements dans localStorage
function saveUsers() {
    localStorage.setItem('lspdUsers', JSON.stringify(users));
    console.log("Utilisateurs sauvegard√©s dans localStorage");
}

// Gestion de la connexion
document.addEventListener('DOMContentLoaded', function() {
    const loginForm = document.getElementById('loginForm');
    const loginMessage = document.getElementById('loginMessage');
    
    // Si on est sur la page de login
    if (loginForm) {
        loginForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const badge = document.getElementById('badge').value;
            const accessCode = document.getElementById('accessCode').value;
            
            // V√©rifier les identifiants
            const user = users.find(u => u.badge === badge && u.code === accessCode);
            
            if (user) {
                // Ajouter le niveau d'acc√®s √† l'utilisateur
                const accessLevel = getAccessLevelByRank(user.grade);
                const corps = getCorpsByRank(user.grade);
                
                console.log("Connexion r√©ussie pour", user.prenom, user.nom);
                console.log("Grade:", user.grade, "- Niveau d'acc√®s:", accessLevel);
                
                // Connexion r√©ussie
                loginMessage.textContent = "Connexion r√©ussie. Redirection en cours...";
                loginMessage.className = "login-message success";
                
                // Stocker les informations de l'utilisateur dans le sessionStorage
                sessionStorage.setItem('currentUser', JSON.stringify({
                    prenom: user.prenom,
                    nom: user.nom,
                    grade: user.grade,
                    matricule: user.matricule,
                    badge: user.badge,
                    division: user.division,
                    accessLevel: accessLevel,
                    corps: corps
                }));
                
                // Rediriger vers la page d'accueil de l'espace agent apr√®s 2 secondes
                setTimeout(() => {
                    window.location.href = "agent-dashboard.html";
                }, 2000);
            } else {
                // √âchec de la connexion
                loginMessage.textContent = "Num√©ro de badge ou code d'acc√®s incorrect.";
                loginMessage.className = "login-message error";
            }
        });
    }
    
    // Pour les pages n√©cessitant une authentification
    const restrictedPages = ['agent-dashboard.html', 'rapports-ois.html', 'personnel.html', 'service.html', 'parametres.html'];
    const currentPage = window.location.pathname.split('/').pop();
    
    if (restrictedPages.includes(currentPage)) {
        // V√©rifier si l'utilisateur est connect√©
        const currentUser = JSON.parse(sessionStorage.getItem('currentUser'));
        
        if (!currentUser) {
            // Rediriger vers la page de login si non connect√©
            window.location.href = "login.html";
            return;
        }
        
        console.log("Page s√©curis√©e:", currentPage);
        console.log("Utilisateur connect√©:", currentUser.prenom, currentUser.nom);
        console.log("Niveau d'acc√®s:", currentUser.accessLevel);
        
        // V√©rifications sp√©cifiques pour certaines pages
        if (currentPage === 'parametres.html' && !hasAccess(currentUser.accessLevel, 4)) {
            // Acc√®s aux param√®tres uniquement pour le corps de direction
            window.location.href = "agent-dashboard.html";
            alert("Acc√®s refus√©. Niveau d'autorisation insuffisant.");
            return;
        }
        
        // Afficher les informations de l'agent dans le header
        const agentInfoHeader = document.getElementById('agentInfoHeader');
        if (agentInfoHeader) {
            agentInfoHeader.innerHTML = `
                <div class="agent-badge">
                    <i class="fas fa-id-badge"></i>
                </div>
                <div class="agent-details">
                    <div class="agent-name">${currentUser.grade} ${currentUser.prenom} ${currentUser.nom}</div>
                    <div class="agent-division">${currentUser.division} - Badge: ${currentUser.badge}</div>
                </div>
            `;
        }
        
        // Personnaliser le message d'accueil sur le tableau de bord
        const welcomeMessage = document.getElementById('welcomeMessage');
        if (welcomeMessage) {
            welcomeMessage.textContent = `Bienvenue, ${currentUser.grade} ${currentUser.nom}`;
        }
        
        // Gestion de la d√©connexion
        const logoutBtn = document.getElementById('logoutBtn');
        if (logoutBtn) {
            logoutBtn.addEventListener('click', function() {
                sessionStorage.removeItem('currentUser');
                window.location.href = "index.html";
            });
        }
        
        // Gestion de la navigation et des permissions
        setupNavigation(currentUser.accessLevel);
    }
});

// Configuration de la navigation en fonction du niveau d'acc√®s
function setupNavigation(accessLevel) {
    const navItems = document.querySelectorAll('.agent-nav a');
    
    navItems.forEach(item => {
        // Masquer les √©l√©ments pour lesquels l'utilisateur n'a pas l'acc√®s
        const requiredLevel = parseInt(item.getAttribute('data-access-level'));
        if (requiredLevel > accessLevel) {
            item.parentElement.style.display = 'none';
        } else {
            console.log("√âl√©ment de navigation visible:", item.textContent.trim(), "- Niveau requis:", requiredLevel);
        }
    });
}

// Fonctions pour les rapports OIS
const oisReports = [];

function addOISReport(report) {
    // Ajouter un timestamp et un statut
    report.timestamp = new Date();
    report.status = "En attente";
    report.id = Date.now(); // Utiliser timestamp comme ID unique
    
    // Ajouter au d√©but du tableau pour avoir les plus r√©cents en premier
    oisReports.unshift(report);
    
    // Sauvegarde imm√©diate dans localStorage
    saveOISReports();
    
    console.log("Rapport ajout√©:", report);
    console.log("Nombre total de rapports:", oisReports.length);
    
    return report;
}

function updateOISReportStatus(reportId, newStatus) {
    const report = oisReports.find(r => r.id === reportId);
    if (report) {
        report.status = newStatus;
        saveOISReports();
        return true;
    }
    return false;
}

function deleteOISReport(reportId) {
    const index = oisReports.findIndex(r => r.id === reportId);
    if (index !== -1) {
        oisReports.splice(index, 1);
        saveOISReports();
        return true;
    }
    return false;
}

function saveOISReports() {
    localStorage.setItem('oisReports', JSON.stringify(oisReports));
    console.log("Rapports sauvegard√©s dans localStorage:", oisReports.length);
}

function loadOISReports() {
    const savedReports = localStorage.getItem('oisReports');
    if (savedReports) {
        // Vider le tableau actuel
        while (oisReports.length > 0) {
            oisReports.pop();
        }
        
        // Charger les rapports sauvegard√©s
        const parsedReports = JSON.parse(savedReports);
        parsedReports.forEach(report => {
            oisReports.push(report);
        });
        
        console.log("Rapports charg√©s depuis localStorage:", oisReports.length);
        
        if (oisReports.length > 0) {
            console.log("Premier rapport:", oisReports[0]);
        }
    } else {
        console.log("Aucun rapport trouv√© dans localStorage");
    }
}

// Fonctions pour la gestion du personnel
function getPersonnel() {
    return users.map(user => ({
        prenom: user.prenom,
        nom: user.nom,
        grade: user.grade,
        matricule: user.matricule,
        badge: user.badge,
        division: user.division,
        code: user.code
    }));
}

function addPersonnel(newUser) {
    // V√©rifier si le matricule ou le badge existe d√©j√†
    const existingUser = users.find(u => 
        u.matricule === newUser.matricule || 
        u.badge === newUser.badge
    );
    
    if (existingUser) {
        return { success: false, message: "Matricule ou badge d√©j√† utilis√©." };
    }
    
    users.push(newUser);
    saveUsers(); // Sauvegarder les changements
    return { success: true, message: "Agent ajout√© avec succ√®s." };
}

function updatePersonnel(matricule, updatedData) {
    const index = users.findIndex(u => u.matricule === matricule);
    
    if (index === -1) {
        return { success: false, message: "Agent non trouv√©." };
    }
    
    // V√©rifier si le nouveau matricule existe d√©j√† (sauf s'il s'agit du m√™me agent)
    if (updatedData.matricule !== matricule && 
        users.some(u => u.matricule === updatedData.matricule)) {
        return { success: false, message: "Ce matricule est d√©j√† utilis√© par un autre agent." };
    }
    
    // V√©rifier si le nouveau badge existe d√©j√† (sauf s'il s'agit du m√™me agent)
    if (updatedData.badge !== users[index].badge && 
        users.some(u => u.badge === updatedData.badge)) {
        return { success: false, message: "Ce num√©ro de badge est d√©j√† utilis√© par un autre agent." };
    }
    
    // Mettre √† jour les donn√©es sauf si elles sont undefined
    Object.keys(updatedData).forEach(key => {
        if (updatedData[key] !== undefined) {
            users[index][key] = updatedData[key];
        }
    });
    
    saveUsers(); // Sauvegarder les changements
    return { success: true, message: "Informations mises √† jour avec succ√®s." };
}

function deletePersonnel(matricule) {
    const index = users.findIndex(u => u.matricule === matricule);
    
    if (index === -1) {
        return { success: false, message: "Agent non trouv√©." };
    }
    
    users.splice(index, 1);
    saveUsers(); // Sauvegarder les changements
    return { success: true, message: "Agent supprim√© avec succ√®s." };
}

// Fonction pour initialiser la page des officiers
document.addEventListener('DOMContentLoaded', function() {
    // V√©rifier si nous sommes sur la page des officiers
    if (window.location.pathname.includes('officiers.html')) {
        initializeOfficersPage();
    }
});

// Fonction principale pour la page des officiers
function initializeOfficersPage() {
    console.log("Initialisation de la page des officiers");
    
    // R√©cup√©rer la liste des utilisateurs (agents)
    const users = initializeUsers();
    const officersContainer = document.getElementById('officersContainer');
    const noOfficersMessage = document.getElementById('noOfficersMessage');
    
    // Filtrer les agents et les trier par grade hi√©rarchique
    function sortByRank(a, b) {
        const rankA = hierarchyRanks.indexOf(a.grade);
        const rankB = hierarchyRanks.indexOf(b.grade);
        return rankB - rankA; // Ordre descendant (plus haut grade en premier)
    }
    
    const sortedUsers = [...users].sort(sortByRank);
    
    // Grouper les agents par corps
    const groupedOfficers = {};
    
    // Initialiser les groupes pour chaque corps
    Object.keys(corpsDivisions).forEach(corps => {
        groupedOfficers[corps] = [];
    });
    
    // R√©partir les agents dans leurs corps respectifs
    sortedUsers.forEach(agent => {
        const corps = getCorpsByRank(agent.grade);
        if (corps && groupedOfficers[corps]) {
            groupedOfficers[corps].push(agent);
        }
    });
    
    // Afficher les agents ou un message s'il n'y en a pas
    if (sortedUsers.length === 0) {
        noOfficersMessage.style.display = 'block';
    } else {
        noOfficersMessage.style.display = 'none';
        
        // Parcourir les corps dans l'ordre d'importance
        const corpsOrder = [
            "Corps de direction",
            "Corps de commandement",
            "Corps de supervision",
            "Corps ex√©cutif"
        ];
        
        // Cr√©er une section pour chaque corps, en commen√ßant par les plus importants
        corpsOrder.forEach(corps => {
            const officersInCorps = groupedOfficers[corps];
            
            if (officersInCorps && officersInCorps.length > 0) {
                // Cr√©er une section pour ce corps
                const corpsSection = document.createElement('div');
                corpsSection.className = 'officers-corps-section';
                
                // Ajouter le titre du corps
                const corpsTitle = document.createElement('h2');
                corpsTitle.className = 'corps-title';
                corpsTitle.textContent = corps;
                corpsSection.appendChild(corpsTitle);
                
                // Cr√©er un conteneur pour les cartes de ce corps
                const corpsCardsContainer = document.createElement('div');
                corpsCardsContainer.className = 'officers-cards-container';
                
                // Ajouter les cartes des agents de ce corps
                officersInCorps.forEach(agent => {
                    const officerCard = createOfficerCard(agent, corps);
                    corpsCardsContainer.appendChild(officerCard);
                });
                
                corpsSection.appendChild(corpsCardsContainer);
                officersContainer.appendChild(corpsSection);
            }
        });
    }
}

// Fonction pour cr√©er une carte d'officier
function createOfficerCard(agent, corps) {
    // Cr√©er la carte de l'agent
    const officerCard = document.createElement('div');
    officerCard.className = 'officer-card';
    
    // D√©terminer la classe CSS du corps pour la couleur de bordure
    const corpsClass = corps ? corps.toLowerCase().replace(/\s+/g, '-') : '';
    
    // Ajouter la classe du corps √† la carte
    if (corpsClass) {
        officerCard.classList.add(`corps-${corpsClass}`);
    }
    
    // Chemin de l'image bas√© sur le num√©ro de badge
    const imagePath = `imgs/${agent.badge}.jpg`;
    
    // Contenu HTML de la carte
    officerCard.innerHTML = `
        <div class="officer-photo">
            <img src="${imagePath}" alt="${agent.grade} ${agent.prenom} ${agent.nom}" onerror="this.src='imgs/default.jpg'; this.onerror=null;">
            <div class="officer-info">
                <div class="officer-name">${agent.prenom} ${agent.nom}</div>
                <div class="officer-details">
                    <div class="officer-grade">${agent.grade}</div>
                    <div class="officer-matricule">Matricule: ${agent.matricule}</div>
                </div>
            </div>
        </div>
        <div class="officer-footer">
            <span>${agent.grade}</span>
        </div>
    `;
    
    return officerCard;
}

// Fonctions pour le tableau de bord - √† ajouter √† la fin de script.js existant

// Initialisation du tableau de bord
document.addEventListener('DOMContentLoaded', function() {
    // V√©rifier si nous sommes sur la page dashboard
    if (window.location.pathname.includes('agent-dashboard.html')) {
        initializeDashboard();
    }
});

// Fonction principale d'initialisation du tableau de bord
function initializeDashboard() {
    console.log("Initialisation du tableau de bord");
    
    // R√©cup√©rer l'utilisateur connect√©
    const currentUser = JSON.parse(sessionStorage.getItem('currentUser'));
    if (!currentUser) {
        window.location.href = "login.html";
        return;
    }
    
    // R√©cup√©rer les donn√©es
    const users = initializeUsers();
    loadOISReports(); // Charge les rapports dans le tableau global oisReports
    
    // V√©rifier si l'utilisateur a acc√®s aux statistiques OIS (Lieutenant I et plus)
    const hasOISAccess = hasRankAccess(currentUser.grade, "Lieutenant I");
    toggleOISStats(hasOISAccess);
    
    // Mettre √† jour les statistiques
    updateAgentStats(users);
    if (hasOISAccess) {
        updateReportStats();
    }
    updateCorpsDistribution(users);
    
    console.log("Tableau de bord initialis√© avec succ√®s");
}

// V√©rifier si un grade a acc√®s (est √©gal ou sup√©rieur √† un grade minimum)
function hasRankAccess(userRank, minRank) {
    const userRankIndex = hierarchyRanks.indexOf(userRank);
    const minRankIndex = hierarchyRanks.indexOf(minRank);
    
    // Un indice plus petit signifie un grade plus √©lev√© dans la hi√©rarchie
    // (car dans hierarchyRanks, les grades sont list√©s du plus bas au plus haut)
    return userRankIndex >= 0 && minRankIndex >= 0 && userRankIndex >= minRankIndex;
}

// Afficher/masquer les statistiques OIS selon le niveau d'acc√®s
function toggleOISStats(hasAccess) {
    const oisStats = document.querySelectorAll('.ois-stat');
    oisStats.forEach(stat => {
        stat.style.display = hasAccess ? 'flex' : 'none';
    });
}

// Mettre √† jour les statistiques des agents
function updateAgentStats(users) {
    const totalAgentsElement = document.getElementById('totalAgents');
    if (totalAgentsElement) {
        totalAgentsElement.textContent = users.length;
    }
}

// Mettre √† jour les statistiques des rapports
function updateReportStats() {
    // Nombre d'enqu√™tes en cours (remplace le nombre total de rapports)
    const investigationReports = oisReports.filter(report => report.status === "Enqu√™te en cours").length;
    const investigationReportsElement = document.getElementById('investigationReports');
    if (investigationReportsElement) {
        investigationReportsElement.textContent = investigationReports;
    }
    
    // Nombre de rapports approuv√©s
    const approvedReports = oisReports.filter(report => report.status === "L√©gitime").length;
    const approvedReportsElement = document.getElementById('approvedReports');
    if (approvedReportsElement) {
        approvedReportsElement.textContent = approvedReports;
    }
    
    // Nombre de rapports en attente
    const pendingReports = oisReports.filter(report => 
        report.status === "En attente" || 
        report.status === "En cours"
    ).length;
    const pendingReportsElement = document.getElementById('pendingReports');
    if (pendingReportsElement) {
        pendingReportsElement.textContent = pendingReports;
    }
}

// Mettre √† jour la r√©partition par corps

function updateCorpsDistribution(users) {
    const corpsDistributionElement = document.getElementById('corpsDistribution');
    if (!corpsDistributionElement) return;
    
    // Calculer le nombre d'agents par corps
    const corpsCounts = {
        "Corps de direction": 0,
        "Corps de commandement": 0,
        "Corps de supervision": 0,
        "Corps ex√©cutif": 0
    };
    
    // Compter les agents dans chaque corps
    users.forEach(user => {
        const corps = getCorpsByRank(user.grade);
        if (corps && corpsCounts.hasOwnProperty(corps)) {
            corpsCounts[corps]++;
        }
    });
    
    // D√©finir l'ordre d'affichage (de la direction aux ex√©cutifs)
    const corpsOrder = [
        "Corps de direction",
        "Corps de commandement", 
        "Corps de supervision", 
        "Corps ex√©cutif"
    ];
    
    // Vider le conteneur
    corpsDistributionElement.innerHTML = '';
    
    // Cr√©er une simple liste pour chaque corps
    corpsOrder.forEach(corps => {
        const count = corpsCounts[corps];
        
        // D√©terminer l'ic√¥ne pour ce corps
        let corpsIcon;
        switch(corps) {
            case "Corps de direction":
                corpsIcon = "fas fa-star";
                break;
            case "Corps de commandement":
                corpsIcon = "fas fa-chess-queen";
                break;
            case "Corps de supervision":
                corpsIcon = "fas fa-user-tie";
                break;
            case "Corps ex√©cutif":
                corpsIcon = "fas fa-user-shield";
                break;
            default:
                corpsIcon = "fas fa-user";
        }
        
        // Cr√©er l'√©l√©ment simplifi√© pour ce corps
        const corpsItem = document.createElement('div');
        corpsItem.className = 'corps-item';
        corpsItem.innerHTML = `
            <div class="corps-info">
                <i class="${corpsIcon}"></i>
                <span class="corps-label">${corps}</span>
                <span class="corps-count">${count} agent${count > 1 ? 's' : ''}</span>
            </div>
        `;
        
        corpsDistributionElement.appendChild(corpsItem);
    });
}

// Syst√®me de gestion des annonces pour le LSPD

// Fonction pour initialiser les annonces dans le localStorage si n√©cessaire
function initializeAnnouncements() {
    if (!localStorage.getItem('lspdAnnouncements')) {
        // Cr√©er quelques annonces par d√©faut
        const defaultAnnouncements = [
            {
                id: Date.now() - 40000,
                date: "2025-05-02",
                author: "Nico Capone",
                authorGrade: "Chief Of Police",
                content: "R√©union de service ce vendredi √† 18h00 au central."
            },
            {
                id: Date.now() - 80000,
                date: "2025-04-30",
                author: "Nico Capone",
                authorGrade: "Chief Of Police",
                content: "Nouveaux uniformes disponibles au vestiaire."
            },
            {
                id: Date.now() - 120000,
                date: "2025-04-28",
                author: "Nico Capone",
                authorGrade: "Chief Of Police",
                content: "Mise √† jour des proc√©dures d'intervention. Consultez le manuel."
            }
        ];
        
        localStorage.setItem('lspdAnnouncements', JSON.stringify(defaultAnnouncements));
        console.log("Annonces par d√©faut initialis√©es");
    }
}

// Fonction pour r√©cup√©rer toutes les annonces
function getAnnouncements() {
    // Initialiser si n√©cessaire
    initializeAnnouncements();
    
    // R√©cup√©rer et trier les annonces par date (plus r√©centes en premier)
    const announcements = JSON.parse(localStorage.getItem('lspdAnnouncements'));
    return announcements.sort((a, b) => b.id - a.id);
}

// Fonction pour ajouter une nouvelle annonce
function addAnnouncement(announcement) {
    // R√©cup√©rer les annonces existantes
    const announcements = getAnnouncements();
    
    // Ajouter la nouvelle annonce
    announcements.unshift(announcement);
    
    // Sauvegarder les annonces
    localStorage.setItem('lspdAnnouncements', JSON.stringify(announcements));
    
    return announcement;
}

// Fonction pour mettre √† jour l'affichage des annonces dans le tableau de bord
function updateAnnouncementsDisplay() {
    const announcementsContainer = document.querySelector('.recent-announcements');
    if (!announcementsContainer) return;
    
    // R√©cup√©rer les 3 annonces les plus r√©centes
    const announcements = getAnnouncements().slice(0, 3);
    
    // Vider le conteneur
    announcementsContainer.innerHTML = '';
    
    // Ajouter chaque annonce
    announcements.forEach(announcement => {
        // Formater la date
        const announcementDate = new Date(announcement.date);
        const formattedDate = announcementDate.toLocaleDateString('fr-FR', {
            day: 'numeric',
            month: 'long',
            year: 'numeric'
        });
        
        // Formater le contenu: remplacer les retours √† la ligne par des balises <br>
        const formattedContent = announcement.content.replace(/\n/g, '<br>');
        
        // Cr√©er l'√©l√©ment d'annonce
        const announcementElement = document.createElement('div');
        announcementElement.className = 'announcement';
        announcementElement.innerHTML = `
            <p class="announcement-date">${formattedDate}</p>
            <p class="announcement-author">${announcement.authorGrade} ${announcement.author}</p>
            <p class="announcement-text">${formattedContent}</p>
        `;
        
        // Ajouter au conteneur
        announcementsContainer.appendChild(announcementElement);
    });
    
    // Si aucune annonce, afficher un message
    if (announcements.length === 0) {
        announcementsContainer.innerHTML = '<div class="no-announcements">Aucune annonce r√©cente disponible.</div>';
    }
}

// Fonction pour ajouter le bouton d'ajout d'annonce (si l'utilisateur a le bon niveau d'acc√®s)
function setupAnnouncementInterface() {
    // R√©cup√©rer l'utilisateur actuel
    const currentUser = JSON.parse(sessionStorage.getItem('currentUser'));
    if (!currentUser) return;
    
    // Trouver l'√©l√©ment parent o√π ajouter le bouton
    const announcementCard = document.querySelector('.dashboard-col .dashboard-card:has(h2 i.fa-bullhorn)');
    if (!announcementCard) return;
    
    // Trouver l'en-t√™te de la carte
    const cardHeader = announcementCard.querySelector('h2');
    
    // V√©rifier si l'utilisateur a le niveau d'acc√®s requis (corps de supervision et plus)
    const hasSupervisorAccess = currentUser.accessLevel >= 2; // Niveau 2 = Corps de supervision
    
    // Si l'utilisateur a acc√®s, ajouter le bouton
    if (hasSupervisorAccess) {
        // Cr√©er le bouton
        const addButton = document.createElement('button');
        addButton.className = 'btn btn-small add-announcement-btn';
        addButton.innerHTML = '<i class="fas fa-plus"></i>';
        addButton.title = "Ajouter une annonce";
        
        // Ajouter le bouton √† c√¥t√© du titre
        cardHeader.appendChild(addButton);
        
        // Ajouter un gestionnaire d'√©v√©nement au bouton
        addButton.addEventListener('click', openAnnouncementModal);
    }
}

// Fonction pour ouvrir la modal d'ajout d'annonce
function openAnnouncementModal() {
    // R√©cup√©rer l'utilisateur actuel
    const currentUser = JSON.parse(sessionStorage.getItem('currentUser'));
    
    // Cr√©er la modal
    const modal = document.createElement('div');
    modal.className = 'modal announcement-modal';
    modal.innerHTML = `
        <div class="modal-content">
            <span class="close-modal">&times;</span>
            <h2>Nouvelle Annonce</h2>
            
            <form id="announcementForm">
                <div class="form-group">
                    <label for="announcementContent">Contenu de l'annonce:</label>
                    <textarea id="announcementContent" name="announcementContent" rows="4" required></textarea>
                </div>
                
                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">Publier l'annonce</button>
                </div>
            </form>
        </div>
    `;
    
    // Ajouter la modal au body
    document.body.appendChild(modal);
    
    // Afficher la modal
    modal.style.display = "block";
    
    // R√©cup√©rer le bouton de fermeture
    const closeBtn = modal.querySelector('.close-modal');
    
    // G√©rer la fermeture de la modal
    closeBtn.addEventListener('click', function() {
        modal.style.display = "none";
        // Supprimer la modal apr√®s l'animation
        setTimeout(() => {
            document.body.removeChild(modal);
        }, 300);
    });
    
    // Fermer la modal en cliquant √† l'ext√©rieur
    window.addEventListener('click', function(event) {
        if (event.target === modal) {
            modal.style.display = "none";
            // Supprimer la modal apr√®s l'animation
            setTimeout(() => {
                document.body.removeChild(modal);
            }, 300);
        }
    });
    
    // G√©rer la soumission du formulaire
    const form = modal.querySelector('#announcementForm');
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // R√©cup√©rer le contenu
        const content = document.getElementById('announcementContent').value;
        
        // Cr√©er l'annonce
        const today = new Date();
        const formattedDate = today.toISOString().split('T')[0]; // Format YYYY-MM-DD
        
        const newAnnouncement = {
            id: Date.now(),
            date: formattedDate,
            author: currentUser.prenom + ' ' + currentUser.nom,
            authorGrade: currentUser.grade,
            content: content
        };
        
        // Ajouter l'annonce
        addAnnouncement(newAnnouncement);
        
        // Mettre √† jour l'affichage
        updateAnnouncementsDisplay();
        
        // Fermer la modal
        modal.style.display = "none";
        // Supprimer la modal apr√®s l'animation
        setTimeout(() => {
            document.body.removeChild(modal);
        }, 300);
    });
}

// Fonction principale d'initialisation du tableau de bord (modifi√©e)
function initializeDashboard() {
    console.log("Initialisation du tableau de bord");
    
    // R√©cup√©rer l'utilisateur connect√©
    const currentUser = JSON.parse(sessionStorage.getItem('currentUser'));
    if (!currentUser) {
        window.location.href = "login.html";
        return;
    }
    
    // R√©cup√©rer les donn√©es
    const users = initializeUsers();
    loadOISReports(); // Charge les rapports dans le tableau global oisReports
    
    // V√©rifier si l'utilisateur a acc√®s aux statistiques OIS (Lieutenant I et plus)
    const hasOISAccess = hasRankAccess(currentUser.grade, "Lieutenant I");
    toggleOISStats(hasOISAccess);
    
    // Mettre √† jour les statistiques
    updateAgentStats(users);
    if (hasOISAccess) {
        updateReportStats();
    }
    updateCorpsDistribution(users);
    
    // Initialiser et afficher les annonces
    initializeAnnouncements();
    updateAnnouncementsDisplay();
    
    // Configurer l'interface d'ajout d'annonce
    setupAnnouncementInterface();
    
    console.log("Tableau de bord initialis√© avec succ√®s");
}

// Fonction pour supprimer une annonce
function deleteAnnouncement(id) {
    // R√©cup√©rer les annonces existantes
    let announcements = getAnnouncements();
    
    // Filtrer pour retirer l'annonce avec l'ID sp√©cifi√©
    announcements = announcements.filter(announcement => announcement.id !== id);
    
    // Sauvegarder les annonces mises √† jour
    localStorage.setItem('lspdAnnouncements', JSON.stringify(announcements));
    
    // Mettre √† jour l'affichage
    updateAnnouncementsDisplay();
    
    return true;
}

// Mise √† jour de la fonction d'affichage pour ajouter le bouton de suppression
function updateAnnouncementsDisplay() {
    const announcementsContainer = document.querySelector('.recent-announcements');
    if (!announcementsContainer) return;
    
    // R√©cup√©rer l'utilisateur actuel
    const currentUser = JSON.parse(sessionStorage.getItem('currentUser'));
    
    // V√©rifier si l'utilisateur a le niveau d'acc√®s requis (corps de supervision et plus)
    const hasSupervisorAccess = currentUser && currentUser.accessLevel >= 2;
    
    // R√©cup√©rer les 3 annonces les plus r√©centes
    const announcements = getAnnouncements().slice(0, 3);
    
    // Vider le conteneur
    announcementsContainer.innerHTML = '';
    
    // Ajouter chaque annonce
    announcements.forEach(announcement => {
        // Formater la date
        const announcementDate = new Date(announcement.date);
        const formattedDate = announcementDate.toLocaleDateString('fr-FR', {
            day: 'numeric',
            month: 'long',
            year: 'numeric'
        });
        
        // Formater le contenu: remplacer les retours √† la ligne par des balises <br>
        const formattedContent = announcement.content.replace(/\n/g, '<br>');
        
        // Cr√©er l'√©l√©ment d'annonce
        const announcementElement = document.createElement('div');
        announcementElement.className = 'announcement';
        
        // Ajouter le contenu de base
        announcementElement.innerHTML = `
            <div class="announcement-header">
                <p class="announcement-date">${formattedDate}</p>
                ${hasSupervisorAccess ? `<button class="btn-delete-announcement" data-id="${announcement.id}" title="Supprimer cette annonce"><i class="fas fa-times"></i></button>` : ''}
            </div>
            <p class="announcement-author">${announcement.authorGrade} ${announcement.author}</p>
            <p class="announcement-text">${formattedContent}</p>
        `;
        
        // Ajouter au conteneur
        announcementsContainer.appendChild(announcementElement);
        
        // Ajouter l'√©v√©nement de suppression si l'utilisateur a les droits
        if (hasSupervisorAccess) {
            const deleteBtn = announcementElement.querySelector('.btn-delete-announcement');
            if (deleteBtn) {
                deleteBtn.addEventListener('click', function() {
                    const id = parseInt(this.getAttribute('data-id'));
                    if (confirm('√ätes-vous s√ªr de vouloir supprimer cette annonce ?')) {
                        deleteAnnouncement(id);
                    }
                });
            }
        }
    });
    
    // Si aucune annonce, afficher un message
    if (announcements.length === 0) {
        announcementsContainer.innerHTML = '<div class="no-announcements">Aucune annonce r√©cente disponible.</div>';
    }
}

// Fonctions pour la page de contact
document.addEventListener('DOMContentLoaded', function() {
    // V√©rifier si on est sur la page de contact
    if (window.location.pathname.includes('contact.html')) {
        initializeContactPage();
    }
});

// Fonction principale pour initialiser la page de contact
function initializeContactPage() {
    // R√©cup√©rer les √©l√©ments
    const selectorOptions = document.querySelectorAll('.selector-option');
    const contactForm = document.getElementById('contactForm');
    const formTypeInput = document.getElementById('formType');
    const formStatus = document.getElementById('formStatus');
    const idCardInput = document.getElementById('idCard');
    const idCardPreview = document.getElementById('idCardPreview');
    const commonFormSection = document.querySelector('.common-form-section');
    
    // Par d√©faut, cacher le formulaire
    commonFormSection.style.display = 'none';
    
    // URLs des webhooks Discord pour chaque service
    const webhooks = {
        'direction': 'https://discord.com/api/webhooks/1369293397759758467/UtNqr6Fj5U0-0Ma2Trdp0ZBMhBQueC1RTOdRxyPUbysmeSluQZMSnyOCtvO8kVo3E9B6',
        'plaintes': 'https://discord.com/api/webhooks/1368963374444056586/MeFJ4NchGJKfPG6kX4BfkLeI_2Q_CP0Mn72qjTYxexpOJVmZUiYL8Ck4-hX_4tYohcum',
        'ppa': 'https://discord.com/api/webhooks/1368978068873678908/NMXm0JdUY9MleLzhyZGSwuxHMJLjjB5svIHrX-2aW-sJh5ep_FKuuyXIIbkvMgfRAoh1',
        'casier': 'https://discord.com/api/webhooks/1368978100729151580/jBjsQCi8DxzybIODRw3v6LinyszIwjnmUXH8WbEYkKaAGJm-7gHMs3_V7pZD2T7QmlwY'
    };

    // IDs des threads existants pour chaque type de formulaire sp√©cifique
    const threadIds = {
        'plaintes': '1368959888436494526',
        'ppa': '1368960121480155229',
        'casier': '1368960252745220157'
    };
    
    // Ajouter un √©v√©nement de clic sur les options de service
    selectorOptions.forEach(option => {
        option.addEventListener('click', function() {
            // Supprimer la classe active de toutes les options
            selectorOptions.forEach(opt => opt.classList.remove('active'));
            // Ajouter la classe active √† l'option s√©lectionn√©e
            this.classList.add('active');
            
            // R√©cup√©rer le type de formulaire
            const formType = this.getAttribute('data-target');
            formTypeInput.value = formType;
            
            // Masquer toutes les sections sp√©cifiques
            document.querySelectorAll('.specific-form-section').forEach(section => {
                section.style.display = 'none';
            });
            
            // Afficher la section sp√©cifique correspondante
            const specificSection = document.getElementById(`${formType}-section`);
            if (specificSection) {
                specificSection.style.display = 'block';
            }
            
            // Afficher le formulaire commun
            commonFormSection.style.display = 'block';
            
            // Faire d√©filer la page vers le formulaire
            commonFormSection.scrollIntoView({ behavior: 'smooth' });
        });
    });
    
    // Gestion de l'aper√ßu de la carte d'identit√©
    if (idCardInput) {
        idCardInput.addEventListener('change', function(e) {
            // V√©rifier s'il y a un fichier s√©lectionn√©
            if (this.files && this.files[0]) {
                const file = this.files[0];
                
                // V√©rifier la taille du fichier (max 5 MB)
                if (file.size > 5 * 1024 * 1024) {
                    alert('Le fichier est trop volumineux. Veuillez s√©lectionner un fichier de moins de 5 MB.');
                    this.value = '';
                    idCardPreview.innerHTML = '';
                    return;
                }
                
                // V√©rifier le type de fichier
                const validTypes = ['image/jpeg', 'image/png', 'image/webp'];
                if (!validTypes.includes(file.type)) {
                    alert('Format de fichier non support√©. Veuillez utiliser JPG, PNG ou WEBP.');
                    this.value = '';
                    idCardPreview.innerHTML = '';
                    return;
                }
                
                // Afficher l'aper√ßu
                const reader = new FileReader();
                reader.onload = function(e) {
                    idCardPreview.innerHTML = `<img src="${e.target.result}" alt="Aper√ßu de la carte d'identit√©">`;
                };
                reader.readAsDataURL(file);
            }
        });
    }
    
    // G√©rer le toggle des informations sur le suspect
    window.toggleSuspectInfo = function() {
        const knowSuspect = document.querySelector('input[name="knowSuspect"]:checked').value;
        const suspectInfo = document.getElementById('suspectInfo');
        
        if (knowSuspect === 'oui') {
            suspectInfo.style.display = 'block';
        } else {
            suspectInfo.style.display = 'none';
        }
    };
    
    // G√©rer la soumission du formulaire
    if (contactForm) {
        contactForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // V√©rifier si un type de formulaire est s√©lectionn√©
            const formType = formTypeInput.value;
            if (!formType) {
                alert('Veuillez s√©lectionner un service √† contacter.');
                return;
            }
            
            // V√©rifier si les champs obligatoires sont remplis selon le type de formulaire
            if (!validateFormFields(formType)) {
                return;
            }
            
            // R√©cup√©rer les donn√©es du formulaire
            const formData = new FormData(this);
            
            // Afficher un message de chargement
            formStatus.textContent = "Envoi en cours...";
            formStatus.className = "form-status loading";
            formStatus.style.display = "block";
            
            // R√©cup√©rer les donn√©es de base
            const discord = formData.get('discord');
            const phone = formData.get('phone');
            const idCardFile = idCardInput.files[0];
            
            // R√©cup√©rer les donn√©es sp√©cifiques selon le type de formulaire
            let specificData = {};
            
            switch (formType) {
                case 'direction':
                    specificData = {
                        reason: formData.get('directionReason')
                    };
                    break;
                    
                case 'plaintes':
                    const knowSuspect = formData.get('knowSuspect');
                    specificData = {
                        resume: formData.get('plainteResume'),
                        knowSuspect: knowSuspect
                    };
                    
                    if (knowSuspect === 'oui') {
                        specificData.suspectNom = formData.get('suspectNom');
                        specificData.suspectPrenom = formData.get('suspectPrenom');
                    }
                    break;
                    
                case 'casier':
                    specificData = {
                        reason: formData.get('casierReason')
                    };
                    break;
            }
            
            // Pr√©parer l'image de la carte d'identit√© pour l'envoi
            if (idCardFile) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    // Cr√©er le payload Discord avec l'image
                    sendToDiscord(formType, discord, phone, specificData, e.target.result, idCardFile.name);
                };
                reader.readAsDataURL(idCardFile);
            } else {
                // Envoyer sans image (ne devrait jamais arriver car le champ est requis)
                sendToDiscord(formType, discord, phone, specificData, null, null);
            }
        });
    }
    
    
    // Fonction pour envoyer les donn√©es √† Discord
    function sendToDiscord(formType, discord, phone, specificData, imageDataUrl, imageName) {
        // S√©lectionner le webhook appropri√©
        const webhookUrl = webhooks[formType];

        // Cr√©er les donn√©es Discord selon le type de formulaire
        let payload = createDiscordPayload(formType, discord, phone, specificData);
        
        // D√©terminer si ce type doit √™tre envoy√© dans un thread
        let url = webhookUrl;

        // Si ce type doit utiliser un thread, ajouter le param√®tre thread_id
        if (formType !== 'direction' && threadIds[formType]) {
            url = `${webhookUrl}?thread_id=${threadIds[formType]}`;
            console.log(`Envoi vers le thread: ${threadIds[formType]} pour le type: ${formType}`);
        }
        
        // Si on a une image, l'envoyer en tant que fichier joint
        if (imageDataUrl) {
            // Pr√©parer les donn√©es pour l'envoi multipart avec fichier
            const formData = new FormData();
            
            // Convertir le dataURL en Blob
            const base64Data = imageDataUrl.split(',')[1];
            const mimeType = imageDataUrl.split(',')[0].split(':')[1].split(';')[0];
            const byteCharacters = atob(base64Data);
            const byteArrays = [];
            
            for (let i = 0; i < byteCharacters.length; i += 1024) {
                const slice = byteCharacters.slice(i, i + 1024);
                const byteNumbers = new Array(slice.length);
                
                for (let j = 0; j < slice.length; j++) {
                    byteNumbers[j] = slice.charCodeAt(j);
                }
                
                const byteArray = new Uint8Array(byteNumbers);
                byteArrays.push(byteArray);
            }
            
            const blob = new Blob(byteArrays, {type: mimeType});
            
            // Ajouter le fichier et le payload √† formData
            formData.append('file', blob, imageName || 'carte-identite.jpg');
            formData.append('payload_json', JSON.stringify(payload));
            
            // Envoyer la requ√™te avec le fichier joint
            fetch(url, {
                method: 'POST',
                body: formData
            })
            .then(response => handleResponse(response))
            .catch(error => handleError(error));
        } else {
            // Envoyer sans fichier (juste le payload JSON)
            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            })
            .then(response => handleResponse(response))
            .catch(error => handleError(error));
        }
    }
    
    // G√©rer la r√©ponse de Discord
    function handleResponse(response) {
        const formStatus = document.getElementById('formStatus');
        const contactForm = document.getElementById('contactForm');
        const idCardPreview = document.getElementById('idCardPreview');
        const selectorOptions = document.querySelectorAll('.selector-option');
        const commonFormSection = document.querySelector('.common-form-section');
        
        if (response.ok) {
            // Succ√®s
            formStatus.textContent = "Votre demande a √©t√© envoy√©e avec succ√®s! Un agent vous contactera prochainement.";
            formStatus.className = "form-status success";
            
            // R√©initialiser le formulaire
            contactForm.reset();
            idCardPreview.innerHTML = '';
            
            // Masquer toutes les sections sp√©cifiques
            document.querySelectorAll('.specific-form-section').forEach(section => {
                section.style.display = 'none';
            });
            
            // Supprimer la classe active de toutes les options
            selectorOptions.forEach(opt => opt.classList.remove('active'));
            
            // Cacher le formulaire apr√®s 3 secondes
            setTimeout(() => {
                commonFormSection.style.display = 'none';
                formStatus.style.display = 'none';
            }, 3000);
        } else {
            // Erreur
            formStatus.textContent = "Une erreur est survenue. Veuillez r√©essayer plus tard.";
            formStatus.className = "form-status error";
        }
    }
    
    // G√©rer les erreurs d'envoi
    function handleError(error) {
        console.error("Erreur lors de l'envoi:", error);
        const formStatus = document.getElementById('formStatus');
        formStatus.textContent = "Une erreur est survenue. Veuillez r√©essayer plus tard.";
        formStatus.className = "form-status error";
    }
    
    // Cr√©er le payload Discord selon le type de formulaire
    function createDiscordPayload(formType, discord, phone, specificData) {
        // Adapter le titre et la couleur selon le type de formulaire
        let title, color, description, fields = [];
        
        // Ajouter les champs communs
        fields.push({
            name: "üì± Informations de contact",
            value: `**Discord:** ${discord}\n**T√©l√©phone:** ${phone}`,
            inline: false
        });
        
        switch (formType) {
            case 'direction':
                title = "Demande de contact avec la Direction";
                color = 0x0a3d62; // Bleu fonc√©
                description = "Un citoyen souhaite contacter la Direction du LSPD.";
                
                // Ajouter les champs sp√©cifiques
                fields.push({
                    name: "üìù Raison de la demande",
                    value: specificData.reason || "Non sp√©cifi√©e",
                    inline: false
                });
                break;
                
            case 'plaintes':
                title = "D√©p√¥t de Plainte";
                color = 0xe74c3c; // Rouge
                description = "Un citoyen souhaite d√©poser une plainte.";
                
                // Ajouter les champs sp√©cifiques
                fields.push({
                    name: "üìÑ R√©sum√© des faits",
                    value: specificData.resume || "Non sp√©cifi√©",
                    inline: false
                });
                
                if (specificData.knowSuspect === 'oui') {
                    fields.push({
                        name: "üë§ Suspect identifi√©",
                        value: `**Nom:** ${specificData.suspectNom || "Non sp√©cifi√©"}\n**Pr√©nom:** ${specificData.suspectPrenom || "Non sp√©cifi√©"}`,
                        inline: false
                    });
                } else {
                    fields.push({
                        name: "üë§ Suspect",
                        value: "Non identifi√©",
                        inline: false
                    });
                }
                break;
                
            case 'ppa':
                title = "Demande de Permis de Port d'Arme (PPA)";
                color = 0xf39c12; // Orange
                description = "Un citoyen souhaite faire une demande de Permis de Port d'Arme.";
                break;
                
            case 'casier':
                title = "Demande d'Extrait de Casier Judiciaire";
                color = 0x2ecc71; // Vert
                description = "Un citoyen souhaite obtenir un extrait de son casier judiciaire.";
                
                // Ajouter les champs sp√©cifiques
                fields.push({
                    name: "üìã Raison de la demande",
                    value: specificData.reason || "Non sp√©cifi√©e",
                    inline: false
                });
                break;
        }
        
        // Cr√©er le payload
        return {
            username: "Contact LSPD",
            avatar_url: "https://static.wikia.nocookie.net/cityv/images/b/b0/1492419055-logolspd.png/revision/latest?cb=20181101122500&path-prefix=fr", // Optionnel, URL d'un avatar pour le webhook
            content: "**Nouvelle demande re√ßue**",
            embeds: [{
                title: title,
                description: description,
                color: color,
                fields: fields,
                timestamp: new Date().toISOString(),
                footer: {
                    text: "Formulaire de contact LSPD"
                }
            }]
        };
    }
}

// Fonction pour valider les champs du formulaire
function validateFormFields(formType) {
    // V√©rifier les champs communs
    const discord = document.getElementById('discord').value;
    const phone = document.getElementById('phone').value;
    const idCard = document.getElementById('idCard').files[0];
    
    if (!discord || !phone || !idCard) {
        alert('Veuillez remplir tous les champs obligatoires dans la section "Vos informations personnelles".');
        return false;
    }
    
    // V√©rifier les champs sp√©cifiques selon le type de formulaire
    switch (formType) {
        case 'direction':
            const directionReason = document.getElementById('directionReason').value;
            if (!directionReason) {
                alert('Veuillez indiquer la raison de votre demande de contact avec la Direction.');
                return false;
            }
            break;
            
        case 'plaintes':
            const plainteResume = document.getElementById('plainteResume').value;
            if (!plainteResume) {
                alert('Veuillez fournir un r√©sum√© des faits pour votre plainte.');
                return false;
            }
            
            const knowSuspect = document.querySelector('input[name="knowSuspect"]:checked').value;
            if (knowSuspect === 'oui') {
                const suspectNom = document.getElementById('suspectNom').value;
                const suspectPrenom = document.getElementById('suspectPrenom').value;
                if (!suspectNom || !suspectPrenom) {
                    alert('Veuillez indiquer le nom et le pr√©nom du suspect.');
                    return false;
                }
            }
            break;
            
        case 'casier':
            const casierReason = document.getElementById('casierReason').value;
            if (!casierReason) {
                alert('Veuillez indiquer la raison de votre demande d\'extrait de casier judiciaire.');
                return false;
            }
            break;
    }
    
    return true;
}

// Fonction pour envoyer les informations des agents √† Discord
function sendAgentsToDiscord() {
    // URL du webhook Discord (√† remplacer par votre URL r√©elle)
    const webhookUrl = "https://discord.com/api/webhooks/1369304468415582209/OinpDpJUWrFP8EVPeL0vPD_X8XvsvZRxoKirZhkkXNl0XLVM795KpEeypbCEmVuOPsn3";
    
    // R√©cup√©rer les agents
    const agents = getPersonnel();
    
    // Trier les agents par ordre hi√©rarchique (du plus haut au plus bas grade)
    agents.sort((a, b) => {
        const rankA = hierarchyRanks.indexOf(a.grade);
        const rankB = hierarchyRanks.indexOf(b.grade);
        // Inverser l'ordre car dans hierarchyRanks, l'index est plus petit pour les grades inf√©rieurs
        return rankA - rankB;
    });
    
    // R√©cup√©rer l'ID du dernier message envoy√© (s'il existe)
    const lastMessageId = localStorage.getItem('discordLastMessageId');
    
    // Grouper les agents par grade
    const agentsByGrade = {};
    agents.forEach(agent => {
        if (!agentsByGrade[agent.grade]) {
            agentsByGrade[agent.grade] = [];
        }
        agentsByGrade[agent.grade].push(agent);
    });
    
    // Couleurs pour chaque corps (en hexad√©cimal pour Discord)
    const corpsColors = {
        "Corps de direction": 0xE74C3C,     // Rouge
        "Corps de commandement": 0xF39C12,  // Orange
        "Corps de supervision": 0x2ECC71,   // Vert
        "Corps ex√©cutif": 0x3498DB          // Bleu
    };
    
    // Cr√©er les champs pour l'embed Discord
    const fields = [];
    
    // Parcourir les grades du plus haut au plus bas
    hierarchyRanks.slice().reverse().forEach(grade => {
        const agentsWithGrade = agentsByGrade[grade];
        
        if (agentsWithGrade && agentsWithGrade.length > 0) {
            // D√©terminer le corps de ce grade
            const corps = getCorpsByRank(grade);
            
            // Ajouter le grade comme titre de section
            fields.push({
                name: `**${grade}**`,
                value: "\u200B", // Caract√®re invisible pour cr√©er un espace
                inline: false
            });
            
            // Ajouter chaque agent
            agentsWithGrade.forEach(agent => {
                fields.push({
                    name: `${agent.prenom} ${agent.nom}`,
                    value: `‚Ä¢ Matricule: ${agent.matricule}\n‚Ä¢ Badge: ${agent.badge}\n‚Ä¢ Code: ${agent.code}`,
                    inline: true
                });
            });
            
            // Ajouter un s√©parateur apr√®s chaque groupe
            fields.push({
                name: "\u200B",
                value: "\u200B",
                inline: false
            });
        }
    });
    
    // Supprimer le dernier s√©parateur
    if (fields.length > 0 && fields[fields.length - 1].name === "\u200B") {
        fields.pop();
    }
    
    // Cr√©er l'embed
    const payload = {
        embeds: [{
            title: "Liste des agents LSPD",
            description: "Liste compl√®te des agents avec leurs informations d'acc√®s",
            color: 0x0A3D62, // Couleur principale LSPD (bleu fonc√©)
            fields: fields,
            footer: {
                text: `Derni√®re mise √† jour: ${new Date().toLocaleString()}`
            },
            thumbnail: {
                url: "https://static.wikia.nocookie.net/cityv/images/b/b0/1492419055-logolspd.png/revision/latest?cb=20181101122500&path-prefix=fr"
            }
        }]
    };
    
    // Si un message pr√©c√©dent existe, le supprimer
    if (lastMessageId) {
        // Supprimer l'ancien message
        fetch(`${webhookUrl}/messages/${lastMessageId}`, {
            method: "DELETE"
        })
        .catch(error => {
            console.error("Erreur lors de la suppression du message pr√©c√©dent:", error);
        })
        .finally(() => {
            // Envoyer le nouveau message apr√®s la tentative de suppression
            sendNewMessage();
        });
    } else {
        // Aucun message pr√©c√©dent, envoyer directement
        sendNewMessage();
    }
    
    // Fonction pour envoyer le nouveau message
    function sendNewMessage() {
        fetch(webhookUrl, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(payload)
        })
        .then(response => response.json())
        .then(data => {
            // Stocker l'ID du message pour la prochaine mise √† jour
            if (data && data.id) {
                localStorage.setItem('discordLastMessageId', data.id);
                console.log("Message envoy√© √† Discord avec succ√®s, ID:", data.id);
            }
        })
        .catch(error => {
            console.error("Erreur lors de l'envoi √† Discord:", error);
        });
    }
}

// Fonction pour configurer la mise √† jour p√©riodique
function setupAgentsSyncToDiscord(intervalMinutes = 30) {
    // Convertir les minutes en millisecondes
    const interval = intervalMinutes * 60 * 1000;
    
    // Envoyer imm√©diatement les donn√©es
    sendAgentsToDiscord();
    
    // Configurer l'intervalle pour les mises √† jour r√©guli√®res
    const intervalId = setInterval(sendAgentsToDiscord, interval);
    
    // Stocker l'ID de l'intervalle pour pouvoir l'arr√™ter plus tard si n√©cessaire
    localStorage.setItem('discordSyncIntervalId', intervalId);
    
    console.log(`Synchronisation des agents configur√©e (toutes les ${intervalMinutes} minutes)`);
    
    return intervalId;
}

// Fonction pour arr√™ter la synchronisation
function stopAgentsSyncToDiscord() {
    const intervalId = localStorage.getItem('discordSyncIntervalId');
    if (intervalId) {
        clearInterval(parseInt(intervalId));
        localStorage.removeItem('discordSyncIntervalId');
        console.log("Synchronisation des agents arr√™t√©e");
    }
}

// Ajouter un bouton √† la page de param√®tres pour activer/d√©sactiver la synchronisation
document.addEventListener('DOMContentLoaded', function() {
    // V√©rifier si nous sommes sur la page des param√®tres
    if (window.location.pathname.includes('parametres.html')) {
        // R√©cup√©rer le conteneur de la page en construction
        const constructionContainer = document.querySelector('.construction-container');
        
        if (constructionContainer) {
            // Cr√©er la section de synchronisation Discord
            const syncSection = document.createElement('div');
            syncSection.className = 'sync-discord-section';
            syncSection.innerHTML = `
                <h3><i class="fab fa-discord"></i> Synchronisation avec Discord</h3>
                <p>Activer/d√©sactiver la synchronisation des informations des agents avec Discord.</p>
                <div class="sync-controls">
                    <button id="startSyncBtn" class="btn btn-primary">D√©marrer la synchronisation</button>
                    <button id="stopSyncBtn" class="btn btn-danger">Arr√™ter la synchronisation</button>
                </div>
                <div id="syncStatus" class="sync-status"></div>
            `;
            
            // Ins√©rer avant le conteneur de construction
            constructionContainer.parentNode.insertBefore(syncSection, constructionContainer);
            
            // Ajouter les √©v√©nements aux boutons
            const startSyncBtn = document.getElementById('startSyncBtn');
            const stopSyncBtn = document.getElementById('stopSyncBtn');
            const syncStatus = document.getElementById('syncStatus');
            
            // V√©rifier si la synchronisation est active
            const isActive = localStorage.getItem('discordSyncIntervalId') !== null;
            updateSyncButtonsState(isActive);
            
            startSyncBtn.addEventListener('click', function() {
                const intervalId = setupAgentsSyncToDiscord(30); // Synchroniser toutes les 30 minutes
                updateSyncButtonsState(true);
                syncStatus.textContent = "Synchronisation activ√©e. Les donn√©es sont envoy√©es toutes les 30 minutes.";
                syncStatus.className = "sync-status success";
            });
            
            stopSyncBtn.addEventListener('click', function() {
                stopAgentsSyncToDiscord();
                updateSyncButtonsState(false);
                syncStatus.textContent = "Synchronisation d√©sactiv√©e.";
                syncStatus.className = "sync-status";
            });
            
            function updateSyncButtonsState(isActive) {
                startSyncBtn.disabled = isActive;
                stopSyncBtn.disabled = !isActive;
            }
        }
    }
});
